{"version":3,"sources":["EditableSpan.tsx","TodoListHeader.tsx","task.tsx","TaskList.tsx","ControlButtons.tsx","AddItemForm.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EditableSpan","props","useState","editMode","setEditMode","title","setTitle","TextField","className","id","label","onBlur","changeTitle","autoFocus","value","onChange","e","currentTarget","onDoubleClick","TodoListHeader","changeToDoListTitle","IconButton","aria-label","onClick","removeTodoList","Delete","Task","Checkbox","size","checked","isDone","changeTaskStatus","changeTaskTitle","removeTask","fontSize","TasksList","tasksComponentsList","task","map","key","length","ControlButtons","onClickFilter","filter","changeFilter","Button","color","AddItemForm","error","setError","addItem","trimmedTitle","trim","errorMessage","required","onKeyPress","variant","AddCircleOutline","TodoList","addTask","taskID","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","tasks","setTasks","todoListID","tasksForTodoLists","t","updatedTasks","tl","console","log","changeTodolistTitle","todoListsForRender","filteredTasksForRender","todoList","getFilteredTasksForRender","Grid","item","Paper","elevation","AppBar","position","Toolbar","style","justifyContent","edge","Menu","Typography","Container","fixed","container","newTodoList_ID","newTodoList","updatedTodoLists","spacing","Boolean","window","location","hostname","match","theme","createTheme","palette","primary","main","secondary","type","ReactDOM","render","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.41f7cfec.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from 'react';\r\nimport './App.css'\r\nimport {TaskType} from \"./TodoList\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpan = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nconst EditableSpan = (props: EditableSpan) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState(props.title)\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField className='inputField' id=\"standard-basic\" label={props.title} onBlur={offEditMode} autoFocus value={title} onChange={onChangeHandler}/>\r\n            : <span className='projectTitle' onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n};\r\nexport default EditableSpan;","import React from 'react';\r\nimport {FilterValuesType} from \"./App\";\r\nimport './App.css'\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TodoListHeaderPropsType = {\r\n    title: string\r\n    filter: FilterValuesType\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTodoList: () => void\r\n    changeToDoListTitle: (title: string) => void\r\n}\r\n\r\nconst TodoListHeader = (props: TodoListHeaderPropsType) => {\r\n    return (\r\n        <h3 className='headerTitle'>\r\n            <EditableSpan title={props.title} changeTitle={props.changeToDoListTitle}/>\r\n            <IconButton aria-label=\"delete\" onClick={props.removeTodoList}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n    )\r\n};\r\n\r\nexport default TodoListHeader;\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport {TaskType} from \"./TodoList\";\r\nimport './App.css';\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete, DeleteOutline} from \"@material-ui/icons\";\r\n\r\ntype TaskPropsType = TaskType & {\r\n    removeTask: (taskID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean) => void\r\n    changeTaskTitle: (taskID: string, title: string) => void\r\n}\r\n\r\nfunction DeleteOutlineIcon(props: { fontSize: string }) {\r\n    return null;\r\n}\r\n\r\nconst Task: React.FC<TaskPropsType> = (props) => {\r\n    const removeTask = () => props.removeTask(props.id)\r\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.id, e.currentTarget.checked)\r\n    }\r\n    const changeTaskTitle = (title: string) => {\r\n        props.changeTaskTitle(props.id, title)\r\n    }\r\n    return (\r\n        <div className='tasksDiv'>\r\n            <Checkbox size='medium'\r\n                      checked={props.isDone}\r\n                      onChange={changeTaskStatus}/>\r\n            <span className={props.isDone ? 'taskDisable' : 'taskEnable'}>\r\n                    <EditableSpan title={props.title} changeTitle={changeTaskTitle}/>\r\n                </span>\r\n            <IconButton className={props.isDone ? 'taskCheck' : ''}  size='small' onClick={removeTask}>\r\n                <Delete fontSize='medium'/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from \"./task\";\r\nimport {TaskType} from \"./TodoList\";\r\nimport {FilterValuesType} from \"./App\";\r\n\r\n\r\ntype TasksListPropsType = {\r\n    task: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string) => void\r\n    changeFilter: (filter: FilterValuesType, taskListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean) => void\r\n    changeTaskTitle: (taskID: string, title: string) => void\r\n}\r\nconst TasksList = (props: TasksListPropsType) => {\r\n\r\n    const tasksComponentsList = props.task.map(task => {\r\n        return (\r\n            <Task key={task.id} {...task} removeTask={props.removeTask}\r\n                  changeTaskStatus={props.changeTaskStatus} changeTaskTitle={props.changeTaskTitle}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (tasksComponentsList.length ?\r\n            <>{tasksComponentsList}</>\r\n            :\r\n            <div className='errorMsg'>Please add task or change task filter!</div>\r\n    );\r\n};\r\nexport default TasksList;\r\n","import React from 'react';\r\nimport {FilterValuesType} from \"./App\";\r\nimport {Button, ButtonGroup} from \"@material-ui/core\";\r\n\r\ntype ControlButtonsType = {\r\n    filter: FilterValuesType\r\n    changeFilter: (filter: FilterValuesType) => void\r\n}\r\n\r\nconst ControlButtons = (props: ControlButtonsType) => {\r\n    const onClickFilter = (filter: FilterValuesType) => {\r\n        return () => props.changeFilter(filter)\r\n    }\r\n\r\n    return (\r\n        <div className='btnsGroup'>\r\n                <Button\r\n                    color={props.filter === 'all' ? 'secondary' : 'primary'}\r\n                    onClick={onClickFilter(\"all\")}>All\r\n                </Button>\r\n                <Button\r\n                    color={props.filter === 'active' ? 'secondary' : 'primary'}\r\n                    onClick={onClickFilter(\"active\")}>Active\r\n                </Button>\r\n                <Button\r\n                    color={props.filter === 'completed' ? 'secondary' : 'primary'}\r\n                    onClick={onClickFilter(\"completed\")}>Completed\r\n                </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ControlButtons;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {AddCircleOutline} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\n\r\ntype AddItem = {\r\n    addItem: (trimmedTitle: string) => void\r\n}\r\n\r\nconst AddItemForm = (props: AddItem) => {\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        e.key === \"Enter\" && addItem()\r\n    }\r\n\r\n    const errorMessage = error ? <div className='errorMsg'>Title is require!</div> : null\r\n\r\n    return (\r\n        <div>\r\n            <TextField required id=\"standard-required\"\r\n                       label=\"Title is required!\"\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       variant=\"outlined\" className={error ? 'error' : ''}\r\n            />\r\n            <IconButton size='medium' onClick={addItem}><AddCircleOutline/></IconButton>\r\n            {errorMessage}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddItemForm;","import React from 'react';\r\nimport TodoListHeader from \"./TodoListHeader\";\r\nimport TasksList from \"./TaskList\";\r\nimport ControlButtons from \"./ControlButtons\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    task: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeFilter: (filter: FilterValuesType, todolistId: string) => void\r\n    addTask: (taskID: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n    changeToDoListTitle: (todoListID: string, title: string) => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nconst TodoList = (props: TodoListPropsType) => {\r\n    const removeTask = (taskID: string) => {\r\n        props.removeTask(taskID, props.id)\r\n    }\r\n    const changeFilter = (filter: FilterValuesType) => {\r\n        props.changeFilter(filter, props.id)\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean) => {\r\n        props.changeTaskStatus(taskID, isDone, props.id)\r\n    }\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.id)\r\n    }\r\n    const addTaskToTodoList = (trimmedTitle: string) => props.addTask(trimmedTitle, props.id)\r\n\r\n    const changeTaskTitle = (taskID: string, title: string) => {\r\n        props.changeTaskTitle(taskID, title, props.id)\r\n    }\r\n    const changeToDoListTitle = (title: string) => {\r\n        props.changeToDoListTitle(props.id, title)\r\n    }\r\n\r\n    return (\r\n        <div className='toDoLists'>\r\n            <TodoListHeader title={props.title} addTask={props.addTask} filter={props.filter} removeTodoList={removeTodoList} changeToDoListTitle={changeToDoListTitle}/>\r\n            <AddItemForm addItem={addTaskToTodoList}/>\r\n            <TasksList task={props.task} removeTask={removeTask} changeFilter={changeFilter}\r\n                       filter={props.filter} changeTaskStatus={changeTaskStatus} changeTaskTitle={changeTaskTitle}/>\r\n            <ControlButtons changeFilter={changeFilter} filter={props.filter}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList, {TaskType} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Toolbar, Typography, Paper} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\ntype ToDoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [todoListID: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todoListID_1 = v1()\r\n    const todoListID_2 = v1()\r\n    const [todoLists, setTodoLists] = useState<Array<ToDoListType>>([\r\n        {id: todoListID_1, title: 'What to learn', filter: 'all'},\r\n        {id: todoListID_2, title: 'What to buy', filter: 'all'}\r\n    ])\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: 'HTML', isDone: true},\r\n            {id: v1(), title: 'CSS', isDone: false},\r\n            {id: v1(), title: 'JS/TS', isDone: true},\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: 'Bread', isDone: true},\r\n            {id: v1(), title: 'Meat', isDone: false},\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n        ]\r\n    })\r\n    const removeTask = (taskID: string, todoListID: string) => {\r\n        const tasksForTodoLists = tasks[todoListID] // Array<TodoListType>\r\n        tasks[todoListID] = tasksForTodoLists.filter(t => t.id !== taskID) // new Array<TodoListType>\r\n        setTasks({...tasks})\r\n    }\r\n    const addTask = (title: string, todoListID: string) => {\r\n        const newTask: TaskType = {\r\n            id: v1(), title, isDone: false\r\n        }\r\n        const updatedTasks = [newTask, ...tasks[todoListID]]\r\n        setTasks({...tasks, [todoListID]: updatedTasks})\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, todoListID: string) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListID]: tasks[todoListID].map(t => t.id === taskID ? {...t, isDone} : t)\r\n        })\r\n    }\r\n    const changeFilter = (filter: FilterValuesType, todoListID: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter} : tl))\r\n    }\r\n    const removeTodoList = (todoListID: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n\r\n    const changeTaskTitle = (id: string, title: string, todoListID: string) => {\r\n        console.log(id, title, todoListID)\r\n        setTasks({...tasks, [todoListID]: tasks[todoListID].map(t => t.id === id ? {...t, title} : t)})\r\n    }\r\n\r\n    const changeTodolistTitle = (todoListID: string, title: string) => {\r\n        debugger\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, title} : tl))\r\n    }\r\n\r\n    const getFilteredTasksForRender = (todoList: ToDoListType) => {\r\n        switch (todoList.filter) {\r\n            case \"completed\":\r\n                return tasks[todoList.id].filter(tl => tl.isDone);\r\n            case \"active\":\r\n                return tasks[todoList.id].filter(t => !t.isDone)\r\n            default:\r\n                return tasks[todoList.id]\r\n        }\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        const newTodoList_ID = v1()\r\n        const newTodoList: ToDoListType = {\r\n            id: newTodoList_ID, title, filter: 'all'\r\n        }\r\n        const updatedTodoLists = [...todoLists, newTodoList]\r\n        setTodoLists(updatedTodoLists)\r\n        setTasks({...tasks, [newTodoList_ID]: []})\r\n    }\r\n    const todoListsForRender = todoLists.map(tl => {\r\n        const filteredTasksForRender = getFilteredTasksForRender(tl)\r\n        return (\r\n            <Grid item>\r\n                <Paper className='paperBlock' elevation={8}>\r\n                    <TodoList key={tl.id}\r\n                              id={tl.id}\r\n                              title={tl.title}\r\n                              task={filteredTasksForRender}\r\n                              removeTask={removeTask}\r\n                              changeFilter={changeFilter}\r\n                              addTask={addTask}\r\n                              filter={tl.filter}\r\n                              changeTaskStatus={changeTaskStatus}\r\n                              removeTodoList={removeTodoList}\r\n                              changeTaskTitle={changeTaskTitle}\r\n                              changeToDoListTitle={changeTodolistTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position='static'>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge='start' color='inherit' aria-label='menu'>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant='h6'>\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color='inherit' variant='outlined'>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container className='addItem'>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {todoListsForRender}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {createTheme, CssBaseline, MuiThemeProvider} from \"@material-ui/core\";\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#ff6e40',\r\n        },\r\n        secondary: {\r\n            main: '#ff8a65',\r\n        },\r\n        type: 'dark',\r\n    },\r\n});\r\n\r\n\r\nReactDOM.render(\r\n    <MuiThemeProvider theme={theme}>\r\n        <CssBaseline/>\r\n        <App/>\r\n    </MuiThemeProvider>\r\n\r\n\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}